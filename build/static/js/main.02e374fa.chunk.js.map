{"version":3,"sources":["components/ChartLogic.tsx","components/DataParser.tsx","components/SymbolSearcher.tsx","App.tsx","index.tsx"],"names":["am4core","am4themes_animated","StockChart","StockData","averageLine","useEffect","console","log","chart","am4charts","paddingRight","dateFormatter","inputDateFormat","xAxes","push","renderer","grid","template","location","valueAxis","yAxes","undefined","tooltip","disabled","series","dataFields","dateX","valueY","openValueY","lowValueY","highValueY","simplifiedProcessing","tooltipText","series2","strokeOpacity","stroke","cursor","lineSeries","defaultState","properties","visible","hiddenInLegend","fillOpacity","scrollbarX","data","dispose","id","style","width","height","DataParser","userSymbol","useState","setStockData","startTimeStamp","setStartTimeStamp","resolution","setResolution","setAverageLine","handleAverageShow","event","handleDateChange","timestamp","currDate","Math","floor","Date","now","getDate","UNIX","a","getFullYear","getMonth","getHours","getMinutes","sum","index","symbolUrl","fetch","then","res","json","resData","c","map","i","o","h","l","date","t","open","toString","high","low","close","average","fetcher","className","onClick","SymbolSearch","searchInput","setSearchInput","transformed","setTransformed","symbols","setSymbols","dataMap","e","symbol","htmlFor","placeholder","list","name","onChange","preventDefault","includes","target","value","toUpperCase","rows","length","SymbolList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02e374fa.chunk.js","sourcesContent":["import * as am4core from \"@amcharts/amcharts4/core\";\r\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\r\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\r\nimport React, { useEffect } from \"react\";\r\nimport { Tooltip } from \"chart.js\";\r\n\r\n/* Chart code */\r\n// Themes begin\r\nam4core.useTheme(am4themes_animated);\r\n// Themes end\r\ninterface stocktype {\r\n   c: string; // close price\r\n   o: string; // open price\r\n   h: string; // high price\r\n   l: string; // low price\r\n   v: string; // volume\r\n   t: string; // timestamp\r\n}\r\ninterface Props {\r\n   StockData: stocktype[] | undefined;\r\n   averageLine: boolean;\r\n}\r\nconst StockChart: React.FC<Props> = ({ StockData, averageLine }) => {\r\n   useEffect(() => {\r\n      console.log(\"stockdata Este:\", StockData);\r\n      let chart = am4core.create(\"chartdiv\", am4charts.XYChart);\r\n      chart.paddingRight = 20;\r\n\r\n      chart.dateFormatter.inputDateFormat = \"yyyy-MM-dd-H-mm\";\r\n\r\n      let dateAxis = chart.xAxes.push(new am4charts.DateAxis());\r\n      dateAxis.renderer.grid.template.location = 0;\r\n\r\n      let valueAxis = chart.yAxes.push(new am4charts.ValueAxis());\r\n      if (valueAxis.tooltip !== undefined) {\r\n         valueAxis.tooltip.disabled = true;\r\n      }\r\n\r\n      let series = chart.series.push(new am4charts.CandlestickSeries());\r\n      series.dataFields.dateX = \"date\";\r\n      series.dataFields.valueY = \"close\";\r\n      series.dataFields.openValueY = \"open\";\r\n      series.dataFields.lowValueY = \"low\";\r\n      series.dataFields.highValueY = \"high\";\r\n      //series.dataFields.customValue = \"avg\";\r\n      //series.dataFields.volumeValueX = \"Volume\";\r\n      series.simplifiedProcessing = true;\r\n      series.tooltipText =\r\n         \"Open:${openValueY.value}\\nLow:${lowValueY.value}\\nHigh:${highValueY.value}\\nClose:${valueY.value}\";\r\n      //Custom average line\r\n      if (averageLine) {\r\n         let series2 = chart.series.push(new am4charts.LineSeries());\r\n         series2.dataFields.dateX = \"date\";\r\n         series2.dataFields.valueY = \"average\";\r\n         series2.tooltipText = \"Average:${valueY}\";\r\n         // series2.tooltip.getFillFromObject = false;\r\n         // series2.tooltip.background.fill = am4core.color(\"#67b7dc\");\r\n         series2.strokeOpacity = 1;\r\n         series2.stroke = am4core.color(\"#e88029\");\r\n      }\r\n\r\n      chart.cursor = new am4charts.XYCursor();\r\n\r\n      // a separate series for scrollbar\r\n      let lineSeries = chart.series.push(new am4charts.LineSeries());\r\n      lineSeries.dataFields.dateX = \"date\";\r\n      lineSeries.dataFields.valueY = \"close\";\r\n      //lineSeries.dataFields.customValue = \"avg\";\r\n      // need to set on default state, as initially series is \"show\"\r\n      lineSeries.defaultState.properties.visible = false;\r\n\r\n      // hide from legend too (in case there is one)\r\n      lineSeries.hiddenInLegend = true;\r\n      lineSeries.fillOpacity = 0.5;\r\n      lineSeries.strokeOpacity = 0.5;\r\n\r\n      let scrollbarX = new am4charts.XYChartScrollbar();\r\n      scrollbarX.series.push(lineSeries);\r\n      chart.scrollbarX = scrollbarX;\r\n      if (StockData !== undefined) {\r\n         chart.data = StockData;\r\n      }\r\n      //chart.current = chart;\r\n\r\n      return () => {\r\n         chart.dispose();\r\n      };\r\n   }, [StockData, averageLine]);\r\n\r\n   return <div id=\"chartdiv\" style={{ width: \"100%\", height: \"95%\" }}></div>;\r\n};\r\nexport default StockChart;\r\n","import React, { useState, useEffect, MouseEvent } from \"react\";\r\nimport StockChart from \"./ChartLogic\";\r\ninterface Props {\r\n   userSymbol: string;\r\n}\r\nconst DataParser: React.FC<Props> = ({ userSymbol }) => {\r\n   const [StockData, setStockData] = useState<stocktype[]>();\r\n   const [startTimeStamp, setStartTimeStamp] = useState<number>(1577836800);\r\n   const [resolution, setResolution] = useState<string>(\"D\");\r\n   const [averageLine, setAverageLine] = useState<boolean>(false);\r\n\r\n   interface stocktype {\r\n      c: string; // close price\r\n      o: string; // open price\r\n      h: string; // high price\r\n      l: string; // low price\r\n      v: string; // volume\r\n      t: string; // timestamp\r\n      avg: number; //average point\r\n   }\r\n   const handleAverageShow = () => (event: MouseEvent) => {\r\n      setAverageLine(!averageLine);\r\n   };\r\n   const handleDateChange = (timestamp: string) => (event: MouseEvent) => {\r\n      let newStamp: number;\r\n      const currDate: number = Math.floor(Date.now() / 1000);\r\n      if (timestamp === \"1D\") {\r\n         //calculeaza current date - o zi\r\n         newStamp = currDate - 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"5\");\r\n      }\r\n      if (timestamp === \"5D\") {\r\n         newStamp = currDate - 5 * 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"30\");\r\n      }\r\n      if (timestamp === \"1W\") {\r\n         newStamp = currDate - 7 * 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"30\");\r\n      }\r\n      if (timestamp === \"1M\") {\r\n         newStamp = currDate - 30 * 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"30\");\r\n      }\r\n      if (timestamp === \"6M\") {\r\n         newStamp = currDate - 6 * 30 * 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"D\");\r\n      }\r\n      if (timestamp === \"1Y\") {\r\n         newStamp = currDate - 12 * 30 * 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"D\");\r\n      }\r\n      if (timestamp === \"5Y\") {\r\n         newStamp = currDate - 5 * 12 * 30 * 24 * 60 * 60;\r\n         setStartTimeStamp(newStamp);\r\n         setResolution(\"W\");\r\n      }\r\n   };\r\n   const getDate = (UNIX: number) => {\r\n      var a = new Date(UNIX * 1000);\r\n      // var months = [\r\n      //    \"Jan\",\r\n      //    \"Feb\",\r\n      //    \"Mar\",\r\n      //    \"Apr\",\r\n      //    \"May\",\r\n      //    \"Jun\",\r\n      //    \"Jul\",\r\n      //    \"Aug\",\r\n      //    \"Sep\",\r\n      //    \"Oct\",\r\n      //    \"Nov\",\r\n      //    \"Dec\",\r\n      // ];\r\n      var year = a.getFullYear();\r\n      var month = 1 + a.getMonth();\r\n      var date = a.getDate();\r\n      var hour = a.getHours();\r\n      var min = a.getMinutes();\r\n      // var sec = a.getSeconds();\r\n      var time = year + \"-\" + month + \"-\" + date + \"-\" + hour + \"-\" + min; // + \" \" + hour + \":\" + min + \":\" + sec;\r\n      return time;\r\n   };\r\n   useEffect(() => {\r\n      let sum: number;\r\n      let index: number;\r\n      function symbolUrl(): string {\r\n         return `https://finnhub.io/api/v1/stock/candle?symbol=${userSymbol}&resolution=${resolution}&from=${startTimeStamp}&to=${Math.floor(\r\n            Date.now() / 1000\r\n         )}&token=butpoev48v6skju275a0`;\r\n      }\r\n      async function fetcher() {\r\n         sum = 0;\r\n         index = 0;\r\n         await fetch(symbolUrl())\r\n            .then((res) => res.json())\r\n            .then((data) => {\r\n               const resData = data.c.map(function (\r\n                  c: number,\r\n                  i: number,\r\n                  o: number,\r\n                  h: number,\r\n                  l: number\r\n               ) {\r\n                  index++;\r\n                  sum += data.c[i];\r\n                  return {\r\n                     date: getDate(data.t[i]),\r\n                     open: data.o[i].toString(),\r\n                     high: data.h[i].toString(),\r\n                     low: data.l[i].toString(),\r\n                     close: data.c[i].toString(),\r\n\r\n                     average: (sum / index).toString(),\r\n                  };\r\n               });\r\n\r\n               setStockData(resData);\r\n            });\r\n      }\r\n      fetcher();\r\n   }, [userSymbol, startTimeStamp, resolution]);\r\n   return (\r\n      <div className=\"charting\">\r\n         <div className=\"buttonList\">\r\n            <button\r\n               id=\"1D\"\r\n               className=\"button1\"\r\n               onClick={handleDateChange(\"1D\")}\r\n            >\r\n               1 Day\r\n            </button>\r\n            <button\r\n               id=\"5D\"\r\n               className=\"button2\"\r\n               onClick={handleDateChange(\"5D\")}\r\n            >\r\n               5 Days\r\n            </button>\r\n            <button\r\n               id=\"1W\"\r\n               className=\"button1\"\r\n               onClick={handleDateChange(\"1W\")}\r\n            >\r\n               1 Week\r\n            </button>\r\n            <button\r\n               id=\"1M\"\r\n               className=\"button2\"\r\n               onClick={handleDateChange(\"1M\")}\r\n            >\r\n               1 Month\r\n            </button>\r\n            <button\r\n               id=\"6M\"\r\n               className=\"button1\"\r\n               onClick={handleDateChange(\"6M\")}\r\n            >\r\n               6 Months\r\n            </button>\r\n            <button\r\n               id=\"1Y\"\r\n               className=\"button2\"\r\n               onClick={handleDateChange(\"1Y\")}\r\n            >\r\n               1 Year\r\n            </button>\r\n            <button\r\n               id=\"5Y\"\r\n               className=\"button1\"\r\n               onClick={handleDateChange(\"5Y\")}\r\n            >\r\n               5 Years\r\n            </button>\r\n            {averageLine ? (\r\n               <button className=\"button4\" onClick={handleAverageShow()}>\r\n                  Hide average line\r\n               </button>\r\n            ) : (\r\n               <button className=\"button3\" onClick={handleAverageShow()}>\r\n                  Show average line\r\n               </button>\r\n            )}\r\n         </div>\r\n         <StockChart StockData={StockData} averageLine={averageLine} />\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default DataParser;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./MainComponent.css\";\r\nimport DataParser from \"./DataParser\";\r\nconst SymbolSearch: React.FC = () => {\r\n   const [searchInput, setSearchInput] = useState<string>(\"\");\r\n   const [transformed, setTransformed] = useState<boolean>(false);\r\n   const [symbols, setSymbols] = useState<string[]>([]);\r\n   const symbolUrl: string =\r\n      \"https://finnhub.io/api/v1/stock/symbol?exchange=US&token=butpoev48v6skju275a0\";\r\n   interface datatype {\r\n      currency: string;\r\n      description: string;\r\n      displaySymbol: string;\r\n      symbol: string;\r\n      type: string;\r\n   }\r\n   useEffect(() => {\r\n      fetch(symbolUrl)\r\n         .then((res) => res.json())\r\n         .then((data) => {\r\n            const dataMap = data.map((e: datatype) => e.symbol);\r\n            setSymbols(dataMap);\r\n         });\r\n   }, []);\r\n\r\n   const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      // if(e.target.value.keyCode == 13) {\r\n      //    e.preventDefault();\r\n      //    return false;\r\n      //  }\r\n      e.preventDefault();\r\n      if (symbols.includes(e.target.value.toUpperCase())) {\r\n         setSearchInput(e.target.value.toUpperCase());\r\n         setTransformed(true);\r\n      }\r\n   };\r\n\r\n   const SymbolList = () => {\r\n      const rows = [];\r\n      for (let i: number = 0; i < symbols.length; i++) {\r\n         rows.push(\r\n            <option key={i} value={symbols[i]}>\r\n               {symbols[i]}\r\n            </option>\r\n         );\r\n      }\r\n\r\n      return rows;\r\n   };\r\n\r\n   return (\r\n      <div className=\"MainDiv\">\r\n         <div className=\"searchBox\">\r\n            <label htmlFor=\"browser\"></label>\r\n            <input\r\n               placeholder=\"Search for a stock market symbol ex: AAPL | GOOG | TSLA...\"\r\n               className=\"searchBar\"\r\n               list=\"browsers\"\r\n               name=\"browser\"\r\n               id=\"browser\"\r\n               onChange={handleSearch}\r\n            ></input>\r\n            <datalist id=\"browsers\" className=\"InputArea\">\r\n               {SymbolList()}\r\n            </datalist>\r\n         </div>\r\n\r\n         <div className=\"MiddleSection\">\r\n            {transformed ? (\r\n               <DataParser userSymbol={searchInput} />\r\n            ) : (\r\n               <div className=\"Loading\">\r\n                  Search for a symbol to render a new chart !\r\n               </div>\r\n            )}\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SymbolSearch;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport SymbolSearch from \"./components/SymbolSearcher\";\n//import WS from \"./components/WS\";\n\nfunction App() {\n   return (\n      <div className=\"App\">\n         <h1 id=\"mainTitle\">Free OHLC Candlestick Stock Market Chart</h1>\n         <SymbolSearch></SymbolSearch>\n         {/* <WS></WS> */}\n      </div>\n   );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}